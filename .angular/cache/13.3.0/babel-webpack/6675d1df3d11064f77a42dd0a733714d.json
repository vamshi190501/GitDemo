{"ast":null,"code":"import { BehaviorSubject, from, of, EMPTY } from 'rxjs';\nimport { map, concatMap, finalize } from 'rxjs/operators';\nimport { environment } from '@environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@angular/common/http\";\nconst baseUrl = `${environment.apiUrl}/accounts`;\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(router, route, http) {\n      this.router = router;\n      this.route = route;\n      this.http = http;\n      this.accountSubject = new BehaviorSubject(null);\n      this.account = this.accountSubject.asObservable();\n    }\n\n    get accountValue() {\n      return this.accountSubject.value;\n    }\n\n    login() {\n      // login with facebook then authenticate with the API to get a JWT auth token\n      this.facebookLogin().pipe(concatMap(accessToken => this.apiAuthenticate(accessToken))).subscribe(() => {\n        // get return url from query parameters or default to home page\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n        this.router.navigateByUrl(returnUrl);\n      });\n    }\n\n    facebookLogin() {\n      // login with facebook and return observable with fb access token on success\n      return from(new Promise(resolve => FB.login(resolve))).pipe(concatMap(({\n        authResponse\n      }) => {\n        if (!authResponse) return EMPTY;\n        return of(authResponse.accessToken);\n      }));\n    }\n\n    apiAuthenticate(accessToken) {\n      // authenticate with the api using a facebook access token,\n      // on success the api returns an account object with a JWT auth token\n      return this.http.post(`${baseUrl}/authenticate`, {\n        accessToken\n      }).pipe(map(account => {\n        this.accountSubject.next(account);\n        this.startAuthenticateTimer();\n        return account;\n      }));\n    }\n\n    logout() {\n      // revoke app permissions to logout completely because FB.logout() doesn't remove FB cookie\n      FB.api('/me/permissions', 'delete', null, () => FB.logout());\n      this.stopAuthenticateTimer();\n      this.accountSubject.next(null);\n      this.router.navigate(['/login']);\n    }\n\n    getAll() {\n      return this.http.get(baseUrl);\n    }\n\n    getById(id) {\n      return this.http.get(`${baseUrl}/${id}`);\n    }\n\n    update(id, params) {\n      return this.http.put(`${baseUrl}/${id}`, params).pipe(map(account => {\n        // update the current account if it was updated\n        if (account.id === this.accountValue.id) {\n          // publish updated account to subscribers\n          account = Object.assign(Object.assign({}, this.accountValue), account);\n          this.accountSubject.next(account);\n        }\n\n        return account;\n      }));\n    }\n\n    delete(id) {\n      return this.http.delete(`${baseUrl}/${id}`).pipe(finalize(() => {\n        // auto logout if the logged in account was deleted\n        if (id === this.accountValue.id) this.logout();\n      }));\n    }\n\n    startAuthenticateTimer() {\n      // parse json object from base64 encoded jwt token\n      const jwtToken = JSON.parse(atob(this.accountValue.token.split('.')[1])); // set a timeout to re-authenticate with the api one minute before the token expires\n\n      const expires = new Date(jwtToken.exp * 1000);\n      const timeout = expires.getTime() - Date.now() - 60 * 1000;\n      const {\n        accessToken\n      } = FB.getAuthResponse();\n      this.authenticateTimeout = setTimeout(() => {\n        this.apiAuthenticate(accessToken).subscribe();\n      }, timeout);\n    }\n\n    stopAuthenticateTimer() {\n      // cancel timer for re-authenticating with the api\n      clearTimeout(this.authenticateTimeout);\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i1.ActivatedRoute), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}